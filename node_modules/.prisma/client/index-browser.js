
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.0
 * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
 */
Prisma.prismaVersion = {
  client: "5.7.0",
  engine: "79fb5193cf0a8fdbef536e4b4a159cad677ab1b9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  institution: 'institution',
  patientType: 'patientType',
  customerID: 'customerID',
  name: 'name',
  consultationProject: 'consultationProject',
  acceptancePerson: 'acceptancePerson',
  createdAt: 'createdAt',
  avatar: 'avatar',
  phone: 'phone',
  phoneType: 'phoneType',
  idCardNo: 'idCardNo',
  gender: 'gender',
  birthDate: 'birthDate',
  nickname: 'nickname',
  referrerType: 'referrerType',
  referralSource: 'referralSource',
  addressProvince: 'addressProvince',
  addressCity: 'addressCity',
  addressDistrict: 'addressDistrict',
  addressDetail: 'addressDetail',
  source: 'source',
  weChat: 'weChat',
  patientNotes: 'patientNotes',
  age: 'age',
  patientTags: 'patientTags',
  qq: 'qq',
  issuingAuthority: 'issuingAuthority',
  email: 'email',
  nationality: 'nationality',
  otherMedicalRecordNo: 'otherMedicalRecordNo',
  expiryDate: 'expiryDate',
  medicalSocialSecurityNo: 'medicalSocialSecurityNo'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  employeeID: 'employeeID',
  name: 'name',
  position: 'position',
  dentalDepartment: 'dentalDepartment',
  businessInstitution: 'businessInstitution',
  gender: 'gender',
  address: 'address',
  employmentStatus: 'employmentStatus',
  title: 'title',
  phone: 'phone',
  professionalLicenseNo: 'professionalLicenseNo',
  email: 'email',
  birthDate: 'birthDate',
  hireDate: 'hireDate'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PatientType = exports.$Enums.PatientType = {
  TEMPORARY: 'TEMPORARY',
  ORDINARY: 'ORDINARY',
  DENTAL_IMPLANTATION: 'DENTAL_IMPLANTATION',
  DENTAL_ORTHODONTICS: 'DENTAL_ORTHODONTICS',
  DENTAL_RESTORATION: 'DENTAL_RESTORATION',
  DENTAL_CARE: 'DENTAL_CARE',
  CHILDRENS_TEETH: 'CHILDRENS_TEETH',
  INFORMATION: 'INFORMATION',
  TOOTH_EXTRACTION: 'TOOTH_EXTRACTION',
  TOOTH_INLAY: 'TOOTH_INLAY',
  PERIODONTAL: 'PERIODONTAL',
  ORTHODONTICS: 'ORTHODONTICS',
  IMPLANTATION: 'IMPLANTATION'
};

exports.ConsultationProject = exports.$Enums.ConsultationProject = {
  TOOTH_EXTRACTION: 'TOOTH_EXTRACTION',
  TOOTH_FILLING: 'TOOTH_FILLING',
  TOOTH_IMPLANTATION: 'TOOTH_IMPLANTATION',
  TOOTH_INLAY: 'TOOTH_INLAY',
  ORTHODONTICS: 'ORTHODONTICS',
  TEETH_CLEANING: 'TEETH_CLEANING'
};

exports.PhoneType = exports.$Enums.PhoneType = {
  SELF: 'SELF',
  FAMILY: 'FAMILY',
  FRIEND: 'FRIEND',
  OTHER: 'OTHER'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  UNKNOWN: 'UNKNOWN'
};

exports.ReferrerType = exports.$Enums.ReferrerType = {
  PATIENT: 'PATIENT',
  EMPLOYEE: 'EMPLOYEE'
};

exports.EmployeePosition = exports.$Enums.EmployeePosition = {
  ADMINISTRATOR: 'ADMINISTRATOR',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  FRONT_DESK: 'FRONT_DESK',
  ADMINISTRATIVE: 'ADMINISTRATIVE',
  FINANCE: 'FINANCE',
  ASSISTANT: 'ASSISTANT',
  COUNSELOR: 'COUNSELOR',
  CUSTOMER_SERVICE: 'CUSTOMER_SERVICE',
  PROCUREMENT: 'PROCUREMENT',
  WAREHOUSE_KEEPER: 'WAREHOUSE_KEEPER'
};

exports.DentalDepartment = exports.$Enums.DentalDepartment = {
  GENERAL_DENTISTRY: 'GENERAL_DENTISTRY',
  DENTAL_IMPLANTATION: 'DENTAL_IMPLANTATION',
  DENTAL_ORTHODONTICS: 'DENTAL_ORTHODONTICS',
  DENTAL_RESTORATION: 'DENTAL_RESTORATION',
  DENTAL_CARE: 'DENTAL_CARE',
  CHILDRENS_TEETH: 'CHILDRENS_TEETH',
  PERIODONTAL: 'PERIODONTAL',
  ORTHODONTICS: 'ORTHODONTICS',
  TOOTH_EXTRACTION: 'TOOTH_EXTRACTION',
  TOOTH_INLAY: 'TOOTH_INLAY'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  ACTIVE: 'ACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  RESIGNED: 'RESIGNED'
};

exports.Prisma.ModelName = {
  Patient: 'Patient',
  Employee: 'Employee'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
